#include "iostream"
#include "TFile.h"
#include "TMath.h"
#include "TTree.h"
#include "TH1F.h"
#include "TH1D.h"
#include "TH1.h"
#include "TF1.h"
#include "TCanvas.h"
#include "TLegend.h"
#include "THStack.h"
#include <iomanip>

#include "My_Style.C"

//#define Matching
//#define No_Matching

static const int nfiles = 8;

const char *filenames[nfiles] = {
  "MuEG2018ABCD_emu2021Marchallwt70met.root",
  "TTbar_emu2021Marchallwt70met.root",
  "TTbar_Notemu2021Marchallwt70met.root",
  "QCD_emu2021Marchallwt70met.root",
  "ST_emu2021Marchallwt70met.root",
  "DYJetsToLL_M-50_emu2021Marchallwt70met.root",
  "WJetsToLNu_emu2021Marchallwt70met.root",
  "Diboson_emu2021Marchallwt70met.root"
};								
float lumi_fac[nfiles] = 	  {		1.,// 0.875,
						//0.00000607799,
						//0.0000190505,
						1,
						1,
						1,
						1,
						1,
						1,
						1
};

float data_lumi = 59.7;//59.7;//27.943;//31.9;//59.7;

void Compare_DataMC()
{
  
  static const int nobshist = 33;//36; //29
  int ncat = nobshist-19;//nobshist-19;//nobshist-12;
  
  TH1D *hist_obs[nobshist][nfiles] ;
  const char *obsnames[nobshist] = {
    "pt","y","mass",
    "NHad","neuhad","sdmass","chrad","subhaddiff","tau21",
    "DAK8_topvsQCD","bbyW_E","Kfactor",
    "re","rnu",
    "N_PV_sel",
    "hist_PFMET","hist_PFMET_pass",
    "Counter","hist_nmu","hist_nel","NJets_AK8","NJets_AK4","NBJets_AK4","hist_mll","hist_mupt","hist_mueta","hist_muphi","hist_elpt","hist_eleta","hist_elphi","hist_bjetpt","hist_bjeteta","hist_bjetphi"
  };
  
  const char *obstitles[nobshist] = {
    "P_{T} (GeV)","y","Mass (GeV)",
    "1-f_{h}","f_{1-h}^{N}","M_{SD} (GeV)","r_{C}","A_{h}","#tau_{21}",
    "Mass decorrelated DeepAK8 score","Z_{b}","#Theta_{b/e}",
    "r_{e}","r_{#nu}",
    "N_{PV}","p^{miss}_{T} (GeV)","p^{miss}_{T} (GeV)",
    "Counter","# of muons","# of electrons",
    "# of AK8 jets","# of AK4 jets","# of AK4 b jets","m_{ll} (GeV)","p_{T} of #mu (GeV)","#eta of #mu","#phi of #mu","p_{T} of el (GeV)","#eta of el","#phi of el","p_{T} of b-jet (GeV)","#eta of b-jet","#phi of b-jet"
  }; 

  
  TH1D *h_Nvert[nfiles];
  TFile *filein;
  
  char name[200];
  
  for(int fg=0; fg<nfiles; fg++){
    
    if(fg>0){ lumi_fac[fg] *= data_lumi; }
    
    cout<<filenames[fg]<<" "<<lumi_fac[fg]<<endl;
    
    sprintf(name,"%s",filenames[fg]);
    filein = new TFile(name,"read");
    
    for(int ihist=0; ihist<nobshist; ihist++){
      
      if(ihist<(ncat)){
#ifdef Matching
	sprintf(name,"Obsmu_%s",obsnames[ihist]);
#elif defined No_Matching
	sprintf(name,"Obs_%s_nomatch_bjet",obsnames[ihist]);
#else
	sprintf(name,"Obs_%s",obsnames[ihist]);
#endif
      }else{
	sprintf(name,"%s",obsnames[ihist]);
      }
      hist_obs[ihist][fg] = (TH1D*)filein->Get(name);
      std::cout << " name " << name << std::endl;
      hist_obs[ihist][fg]->Scale(lumi_fac[fg]);
      
      if (ihist==14) {
        hist_obs[ihist][fg]->GetXaxis()->SetRangeUser(0.0,50.0);
      }
    }
  }
  
  int col[nfiles-1]  = {kRed,kMagenta-7,kGreen+4,kBlue,kOrange+7,kCyan+1,kRed-5};
  
  const char *dataname[nfiles] = {"Data",/*"t #bar{t} (e+j)",*/"t #bar{t} (e#mu)","t #bar{t} (non-e#mu)","QCD","Single t","Z+j","W+j","DiBoson"};
    
  THStack *hist_obs_stack[nobshist];
  THStack *hist_obs_stack2v[nobshist];
  TH1 *last_obs[nobshist]; 
  TH1D *hist_obs_bkg[nobshist];
  TH1D *rat_obs[nobshist];
  TCanvas *cv[nobshist];
  TLegend *legv[nobshist];
  
  TFile *outputFile = new TFile( "stack_entryorg.root", "RECREATE" );

  for(int iv=0; iv<nobshist; iv++){
    
    sprintf(name,"Stack_%s",obsnames[iv]);
    hist_obs_stack[iv] = new THStack(name,"");
    sprintf(name,"Stack2v_%s",obsnames[iv]);
    hist_obs_stack2v[iv] = new THStack(name,"");

    for(int bkg=1; bkg<(nfiles); bkg++){ 
      
      hist_obs[iv][nfiles-bkg]->SetFillColor(col[nfiles-bkg-1]);
      hist_obs[iv][nfiles-bkg]->SetLineColor(col[nfiles-bkg-1]);
      hist_obs[iv][nfiles-bkg]->GetYaxis()->SetTitleOffset(1.2);
      //if (iv == 12) hist_obs[iv][nfiles-bkg]->Rebin(2);
      hist_obs_stack[iv]->Add(hist_obs[iv][nfiles-bkg]);
      if (bkg != 7) hist_obs_stack2v[iv]->Add(hist_obs[iv][nfiles-bkg]);
    }
    last_obs[iv] = (TH1*)hist_obs_stack[iv]->GetStack()->Last();                                     
    last_obs[iv]->Write();                                                                             
    
    
    for(int bkg=0; bkg<(nfiles-1); bkg++){ 	
      if(bkg==0) { hist_obs_bkg[iv] = (TH1D*)hist_obs[iv][bkg+1]->Clone(); }
      else { hist_obs_bkg[iv]->Add(hist_obs[iv][bkg+1]); }
      //if (iv == 12) hist_obs_bkg[iv]->Rebin(2);
    }
    sprintf(name,"%s",obstitles[iv]);
    hist_obs[iv][0]->GetXaxis()->SetTitle(name);
    hist_obs[iv][0]->GetXaxis()->SetTitleSize(0.045);
    hist_obs[iv][0]->GetXaxis()->SetLabelSize(0.045);
    hist_obs[iv][0]->GetXaxis()->CenterTitle();
    
    sprintf(name,"No. of events");
    hist_obs[iv][0]->GetYaxis()->SetTitle(name);
    hist_obs[iv][0]->GetYaxis()->SetTitleSize(0.04);
    hist_obs[iv][0]->GetYaxis()->SetLabelSize(0.04);
    hist_obs[iv][0]->GetYaxis()->SetTitleOffset(1.4);
    hist_obs[iv][0]->GetYaxis()->CenterTitle();
    
    // canv obs //
    sprintf(name,"Canv_%s",obsnames[iv]);
    hist_obs[iv][0]->SetMaximum(1.1 * max(hist_obs[iv][0]->GetMaximum(),hist_obs_bkg[iv]->GetMaximum()));
    if(iv==15){
      //hist_obs[iv][0]->SetMinimum(0.5);
    }
    else{
      hist_obs[iv][0]->SetMinimum(0.5);
    }
    
    cv[iv] = tdrDiCanvas(name,hist_obs[iv][0],hist_obs_bkg[iv],8,0);
    
    if(iv==3||iv==14||iv==8){
      legv[iv] = tdrLeg(0.2,0.65,0.395,0.915);
    }else{
      legv[iv] = tdrLeg(0.65,0.65,0.875,0.915);
    }
    
    legv[iv]->SetTextFont(42);
    legv[iv]->SetTextSize(0.045);
    legv[iv]->SetBorderSize(0);
    
    for(int bkg=0; bkg<(nfiles); bkg++){ 
      if(bkg==0){ legv[iv]->AddEntry(hist_obs[iv][bkg],dataname[bkg],"ep"); }
      else{	
	legv[iv]->AddEntry(hist_obs[iv][bkg],dataname[bkg],"f");
      }
    }
    
    cv[iv]->cd(1);
    gPad->SetLogy(1);
    hist_obs[iv][0]->SetMaximum(20*hist_obs[iv][0]->GetMaximum());
    if(iv==0){
      gPad->SetLogx(1);
    }
    
    hist_obs[iv][0]->SetFillStyle(0);
    hist_obs[iv][0]->SetFillColor(0);
    hist_obs[iv][0]->SetMarkerStyle(kFullCircle);
    hist_obs[iv][0]->SetMarkerColor(kBlack);
    hist_obs[iv][0]->SetMarkerSize(0.7);
    hist_obs[iv][0]->SetLineColor(kBlack);
    hist_obs[iv][0]->GetYaxis()->SetTitleOffset(1.5);

    if (iv==12) {
      //hist_obs_stack[iv]->Rebin(2);
      //hist_obs[iv][0]->Rebin(2);
      //hist_obs_bkg[iv]->Rebin(2);
    }
    hist_obs_stack[iv]->Draw("histSAME");
    hist_obs[iv][0]->Draw("PSAME");
    
    gPad->RedrawAxis();
    
    cv[iv]->cd(2);
    rat_obs[iv] = (TH1D*)hist_obs[iv][0]->Clone();
    rat_obs[iv]->Divide(hist_obs_bkg[iv]);
    if(iv==0){
      gPad->SetLogx(1);
      rat_obs[iv]->GetXaxis()->SetMoreLogLabels(kTRUE);
      rat_obs[iv]->GetXaxis()->SetNoExponent(kTRUE);
    }
    
    sprintf(name,"%s",obstitles[iv]);
    rat_obs[iv]->GetXaxis()->SetTitle(name);
    rat_obs[iv]->GetXaxis()->SetTitleSize(0.1);
    rat_obs[iv]->GetXaxis()->SetLabelSize(0.1);
    rat_obs[iv]->GetXaxis()->CenterTitle();
    
    rat_obs[iv]->GetYaxis()->SetTitle("Data / MC");
    rat_obs[iv]->GetYaxis()->SetTitleSize(0.1);
    rat_obs[iv]->GetYaxis()->SetLabelSize(0.1);
    rat_obs[iv]->GetYaxis()->SetTitleOffset(0.75);
    rat_obs[iv]->GetYaxis()->SetNdivisions(406);
    rat_obs[iv]->GetYaxis()->CenterTitle();
    
    rat_obs[iv]->SetMinimum(0);
    rat_obs[iv]->SetMaximum(2.);
    
    rat_obs[iv]->SetFillStyle(0);
    rat_obs[iv]->SetFillColor(0);
    rat_obs[iv]->SetMarkerStyle(kFullCircle);
    rat_obs[iv]->SetMarkerColor(kBlack);
    rat_obs[iv]->SetMarkerSize(0.7);
    rat_obs[iv]->SetLineColor(kBlack);
    
    rat_obs[iv]->Draw("e,p");
    
    TLine *line = new TLine(rat_obs[iv]->GetBinLowEdge(1),1.,rat_obs[iv]->GetBinLowEdge(rat_obs[iv]->GetNbinsX()),1.);
    line->SetLineColor(7);
    line->Draw("sames");
    
#ifdef Matching
    sprintf(name,"Data_MC/EMU_SELallwt70met/%s_mu.pdf",cv[iv]->GetName());
#elif defined(No_Matching)
    sprintf(name,"Data_MC/EMU_SELallwt70met/%s_MET110.pdf",cv[iv]->GetName());
#else
    sprintf(name,"Data_MC/EMU_SELallwt70met/%s.pdf",cv[iv]->GetName());
#endif
    
    cv[iv]->SaveAs(name);
  }
  outputFile->Close();
}
